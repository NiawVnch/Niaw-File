#Update and Upgrade Your System

sudo apt update
sudo apt upgrade

#Install python

sudo apt update
sudo apt install python3

#Install pip

sudo apt update
sudo apt install python3-pip

#if have requirement file

pip3 install -r requirements.txt

#Install Required Dependencies

sudo apt install build-essential cmake git pkg-config libjpeg-dev libtiff5-dev libjasper-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libgtk2.0-dev libatlas-base-dev gfortran python3-dev

#Install Python Virtual Environment (Optional but Recommended)

sudo apt install python3-venv
python3 -m venv myenv
source myenv/bin/activate

# Update and install build dependencies
sudo apt update
sudo apt install python3-dev python3-pip python3-venv build-essential libhdf5-dev

# Create and activate a virtual environment
python3 -m venv myenv
source myenv/bin/activate

# Upgrade pip, setuptools, and wheel
pip install --upgrade pip setuptools wheel

#Install the Required Dependencies

sudo apt-get update
sudo apt-get install -y libgtk2.0-dev pkg-config

#recommend but no need

sudo apt-get install -y build-essential cmake git unzip pkg-config
sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev
sudo apt-get install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install -y libxvidcore-dev libx264-dev
sudo apt-get install -y libgtk-3-dev
sudo apt-get install -y libatlas-base-dev gfortran
sudo apt-get install -y python3-dev

#If want to re-build opencv

pip uninstall opencv-python
pip uninstall opencv-python-headless
pip install opencv-python

#install library

pip install opencv-python opencv-python-headless keras scipy pandas matplotlib tensorflow==2.12.0
pip install scikit-learn
pip install scikit-learn==1.4.2 scikit-image

# Navigate to the directory containing the script
cd /home/username/scripts

#Show video index (after "video")
v4l2-ctl --list-devices

# Run the script
python3 "Test Camera.py"

#install VScode
linaro@linaro-alip:~$ cd Downloads
linaro@linaro-alip:~/Downloads$ ls
 code_1.90.1-1718141439_amd64.deb   dataset   main_opencam.py   myenv  'Test Pret rainCNN model'  'Tinker board setup detail.txt'
linaro@linaro-alip:~/Downloads$ sudo dpkg -i code_1.90.1-1718139718_arm64.deb

#install node-red
#install MQTT broker on device
sudo apt-get install mosquitto mosquitto-clients

#Rule file for allow 1883/3389 port firewall
sudo mkdir -p /etc/iptables
sudo iptables -A INPUT -p tcp --dport 1883 -j ACCEPT
#Not use#sudo iptables-save > /etc/iptables/rules.v4
sudo iptables-save | sudo tee /etc/iptables/rules.v4 > /dev/null

sudo npm install -g --unsafe-perm node-red pm2
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/node-red/node_modules/.bin/pm2 startup systemd -u pi --hp /home/pi
sudo npm install -g pm2
sudo pm2 startup systemd -u pi --hp /home/pi
pm2 start node-red
pm2 status


